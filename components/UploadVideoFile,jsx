import React, { useState } from 'react';

interface VideoUploadProps {
  api: {
    post: (url: string, data?: any) => Promise<any>;
  };
}

export default function VideoUpload({ api }: VideoUploadProps) {
  const [file, setFile] = useState<File | null>(null);
  const [progress, setProgress] = useState(0);

  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const upload = async () => {
    if (!file) return;
    const { uploadUrl, jobData } = await api.post('/generate-upload-url', {
      filename: file.name,
      contentType: file.type
    });

    await fetch(uploadUrl, {
      method: 'PUT',
      headers: { 'Content-Type': file.type },
      body: file
      // onUploadProgress is not supported in fetch API; consider using XMLHttpRequest for progress
    });

    await api.post('/start-transcode', { key: jobData.key });
    alert('Upload complete â€” processing started.');
  };

  return (
    <div>
      <input type="file" accept="video/*" onChange={handleFile} />
      {file && <button onClick={upload}>Upload</button>}
      {progress > 0 && <div>Upload Progress: {progress}%</div>}
    </div>
  );
}
